{"version":3,"file":"static/js/883.adb6042f.chunk.js","mappings":"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","sources":["component/MovieCard/MovieCard.styled.tsx","component/MovieCard/MovieCard.tsx","component/CheckedFilter/CheckedFilter.tsx","component/RangeSlider/RangeSlider.tsx","component/MoviesFilter/MoviesFilter.tsx","component/Movies/Movies.tsx","hooks/useIntersectionObserver.ts"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Img = styled.img`\n  width: 100%;\n`;\n\nexport const BoxFilm = styled.li`\n  width: 200px;\n  border: 3px solid #104d75;\n  position: relative;\n  text-decoration: none;\n  transition: transform 0.25s;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\nexport const BoardFilm = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  list-style: none;\n  /* padding: 60px 60px; */\n  gap: 20px;\n  margin: 16px 16px 0 0;\n\n`;\nexport const FilmName = styled.p`\n  position: absolute;\n  background: linear-gradient(to top, #0c0f21, #00000040);\n  text-align: center;\n  right: 0;\n  width: 100%;\n  z-index: 2;\n  bottom: 0;\n  color: #fff;\n  padding-bottom: 10px;\n  padding-top: 10px;\n  font-weight: 600;\n`;\n","import React, { memo} from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport {  FilmName, Img} from \"./MovieCard.styled\";\n\ninterface MovieCardsProps {\n  // adult: boolean;\n  // backdrop_path: string;\n  // genre_ids: number[];\n  // id: number;\n  // original_language: string;\n  // original_title: string;\n  // overview: string;\n  // popularity: number;\n  // poster_path?: string;\n  // release_date: string;\n  // title: string;\n  // video: boolean;\n  // vote_average: number;\n  // vote_count: number;\n  id: number;\n  title: string;\n  poster_path: string | undefined;\n  popularity: number;\n}\n// type Props = {\n//   movie: MovieCardsProps;\n// };\n//       \"adult\": false,\n//       \"backdrop_path\": \"/kXfqcdQKsToO0OUXHcrrNCHDBzO.jpg\",\n//       \"genre_ids\": [\n//         18,\n//         80\n//       ],\n//       \"id\": 278,\n//       \"original_language\": \"en\",\n//       \"original_title\": \"The Shawshank Redemption\",\n//       \"overview\": \"Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.\",\n//       \"popularity\": 171.726,\n//       \"poster_path\": \"/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg\",\n//       \"release_date\": \"1994-09-23\",\n//       \"title\": \"The Shawshank Redemption\",\n//       \"video\": false,\n//       \"vote_average\": 8.7,\n//       \"vote_count\": 25927\n\nfunction MovieCard({ id, title, poster_path, popularity }: MovieCardsProps) {\n   const location = useLocation();\n   const defaultImg =\n    \"https://cannamazoo.com/assets/defaults/img/default-product-img.jpg\";\n  return (\n    <>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <Img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n              : defaultImg\n          }\n          width={200}\n          height={300}\n          alt={title}\n        />\n        <FilmName>{title}</FilmName>\n      </Link>\n    </>\n  );\n}\n\nexport default memo(MovieCard);\n","import { Accordion, AccordionDetails, AccordionSummary, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Skeleton} from '@mui/material';\nimport React, { useEffect, useState } from 'react'\nimport { Controller } from 'react-hook-form';\nimport { GenresItem, getGenres } from '../../api/tmdb';\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport { useGetGenresQuery } from '../../services/tmbd';\n\ninterface CheckedProps {\n  control: any;\n}\n\n\nfunction CheckedFilter({ control }: CheckedProps) {\n  const { data:genres=[], isLoading:genresLoading} = useGetGenresQuery();\n\n    // const [genres, setGenres] = useState<GenresItem[]>();\n    // useEffect(() => {\n    //   const fetchGenres = async () => {\n    //     const fetchedGenres = await getGenres();\n    //       setGenres(fetchedGenres);\n    //   };\n    //   fetchGenres();\n    // }, []); \n  \n  return (\n    <FormControl\n      component=\"fieldset\"\n      variant=\"standard\"\n      sx={{ m: 2, display: \"block\" }}\n    >\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ArrowDropDownIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel2-header\"\n        >\n          <FormLabel>Genres</FormLabel>\n        </AccordionSummary>\n       {genresLoading ?<Skeleton/>: ( <AccordionDetails>\n          <FormGroup sx={{ maxHeight: 500 }}>\n            <Controller\n              control={control}\n              name=\"genres\"\n              render={({ field }) => (\n                <>\n                  {genres &&\n                    genres.map((genre) => (\n                      <FormControlLabel\n                        key={genre.id}\n                        control={\n                          <Checkbox\n                            value={genre.id}\n                            checked={field.value.includes(genre.id)}\n                            onChange={(event, checked) => {\n                              const valueNumber = Number(event.target.value);\n                              if (checked) {\n                                field.onChange([...field.value, valueNumber]);\n                              } else {\n                                field.onChange(\n                                  field.value.filter(\n                                    (value: number) => value !== valueNumber\n                                  )\n                                );\n                              }\n                            }}\n                          />\n                        }\n                        label={genre.name}\n                      />\n                    ))}\n                </>\n              )}\n            />\n          </FormGroup>\n        </AccordionDetails>)}\n      </Accordion>\n    </FormControl>\n  );\n}\n\nexport default CheckedFilter","import { FormControl, FormLabel, Slider } from \"@mui/material\";\nimport { Controller } from \"react-hook-form\";\n\ninterface RangeSliderProps {\n  control: any;\n}\n\nfunction RangeSlider({ control }: RangeSliderProps) {\n  const minYear = 1950;\n  const maxYear = new Date().getFullYear();\n\n  // Функція для отримання тексту значення\n  function valuetext(value: number) {\n    return `${value}`;\n  }\n  const marks = [\n    { value: minYear, label: `${minYear}` },\n    { value: maxYear, label: `${maxYear}` },\n  ];\n  return (\n    <FormControl\n      component=\"fieldset\"\n      variant=\"standard\"\n      sx={{ m: 2, display: \"block\" }}\n    >\n      <FormLabel>Release year </FormLabel>\n      <Controller\n        control={control}\n        name=\"primary_release_year\"\n        render={({ field: { onChange, value } }) => (\n          <Slider\n            getAriaLabel={() => \"Release year\"}\n            value={value}\n            onChange={(_, value) => onChange(value)}\n            valueLabelDisplay=\"auto\"\n            getAriaValueText={valuetext}\n            track={false}\n            min={minYear}\n            max={maxYear}\n            marks={marks}\n            step={1}\n          />\n        )}\n      />\n    </FormControl>\n  );\n}\n\nexport default RangeSlider;\n\n// ! варіант з проміжком часу!//\n\n// import { debounce, FormControl, FormLabel, Slider } from \"@mui/material\";\n// import React, { useState } from \"react\";\n// import { Controller } from \"react-hook-form\";\n\n// function RangeSlider() {\n//   // Визначення мінімального та максимального років\n//   const minYear = 1950;\n//   const maxYear = new Date().getFullYear(); // Поточний рік\n\n//   // Функція для отримання тексту значення\n//   function valuetext(value: number) {\n//     return `${value}`;\n//   }\n\n//   // Стан для збереження обраних значень діапазону років\n//   const [value, setValue] = useState<number[]>([minYear, maxYear]);\n\n//   // Функція, що викликається при зміні значення слайдера\n\n//   const handleChange = (event: Event, newValue: number | number[]) => {\n//       setValue(newValue as number[]);\n//       console.log(value);\n\n//   };\n//     const marks = [\n//       { value: 1950, label: \"1950\" },\n//       { value: maxYear, label: `${maxYear}` },\n//     ];\n//   return (\n//     <FormControl\n//       component=\"fieldset\"\n//       variant=\"standard\"\n//       sx={{ m: 2, display: \"block\" }}\n//     >\n//       <FormLabel>Release year </FormLabel>\n//       {/* Слайдер для вибору діапазону років */}\n//       <Slider\n//         getAriaLabel={() => \"Release year\"}\n//         value={value}\n//         onChange={handleChange}\n//         valueLabelDisplay=\"auto\"\n//         getAriaValueText={valuetext}\n//         // Встановлення мінімального та максимального значень слайдера\n//         min={minYear}\n//               max={maxYear}\n//               marks= {marks}\n//         // Крок для крокування по слайдеру (необов'язково)\n//         step={1}\n//       />\n//     </FormControl>\n//   );\n// }\n\n// export default RangeSlider;\n","import { FilterAltOffOutlined } from \"@mui/icons-material\";\nimport {\n  Autocomplete,\n  Button,\n  debounce,\n  FormControl,\n  Paper,\n  TextField,\n} from \"@mui/material\";\nimport { key } from \"localforage\";\nimport React, { useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { getKeywords } from \"../../api/tmdb\";\nimport { useGetGenresQuery, useGetKeywordsQuery } from \"../../services/tmbd\";\nimport CheckedFilter from \"../CheckedFilter/CheckedFilter\";\nimport RangeSlider from \"../RangeSlider/RangeSlider\";\n\nexport  interface Filters {\n  keywords: KeywordsItem[];\n  primary_release_year?: number;\n  genres?: number[];\n}\n  interface KeywordsItem {\n    id: number;\n    name: string;\n  }\ninterface MoviesFilterProps{\n  onApply(filters: Filters): void;\n\n\n}\nfunction MoviesFilter({ onApply }: MoviesFilterProps) {\n  const [keywords, setKeywords] = useState<string>('');\n  const { data: keywordsOption = [], isLoading: keywordsLoading } =\n    useGetKeywordsQuery(keywords,{skip:!keywords});\n\n  const { handleSubmit, control } = useForm<Filters>({\n    defaultValues: {\n      keywords: [],\n      primary_release_year: 1900,\n      genres:[],\n    },\n  });\n\n  const fetchKeyword = useMemo(() =>debounce((query: string) => {setKeywords(query)}, 1000),[]);\n\n\n  \n  return (\n    <Paper sx={{ m: 2, p: 0.6 }}>\n      <form onSubmit={handleSubmit(onApply)}>\n        <FormControl\n          component=\"fieldset\"\n          variant=\"standard\"\n          sx={{ m: 2, display: \"block\" }}\n        >\n          <Controller\n            control={control}\n            name=\"keywords\"\n            render={({ field: { onChange, value } }) => (\n              <Autocomplete\n                multiple\n                disablePortal\n                loading={keywordsLoading}\n                options={keywordsOption}\n                filterOptions={(x) => x}\n                getOptionLabel={(option) => option.name}\n                onChange={(_, value) => onChange(value)}\n                value={value}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Keywords\" />\n                )}\n                onInputChange={(_, value) => fetchKeyword(value)}\n              />\n            )}\n          />\n        </FormControl>\n        <CheckedFilter control={control} />\n        <RangeSlider control={control} />\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          startIcon={<FilterAltOffOutlined />}\n          sx={{ m: 2 }}\n        >\n          Apply Filter\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n\nexport default MoviesFilter;\n","import { useCallback, useState } from \"react\";\nimport MovieCard from \"../MovieCard/MovieCard\";\nimport { BoardFilm, BoxFilm } from \"../MovieCard/MovieCard.styled\";\n\nimport { useIntersectionObserver } from \"../../hooks/useIntersectionObserver\";\nimport Loader from \"../Loader/Loader\";\nimport { Grid, Typography } from \"@mui/material\";\nimport MoviesFilter, { Filters } from \"../MoviesFilter/MoviesFilter\";\nimport { MovieFilters } from \"../../api/tmdb\";\nimport { MovieQuery, useGetFiltrateMoviesQuery } from \"../../services/tmbd\";\nimport { useLocation } from \"react-router-dom\";\n\n// interface MoviesProps {\n//   movies: Movie[];\n//   loading: boolean;\n//   hasMorePages: boolean;\n// }\nconst initialQuery: MovieQuery = {\n  page: 1,\n  filters: {},\n};\n\nfunction Movies() {\n  const [query, setQuery] = useState<MovieQuery>(initialQuery);\n  const { data, isFetching } = useGetFiltrateMoviesQuery(query);\n  const [filter, setFilter] = useState<Filters>();\n  const movies = data?.results;\n  const hasMorePages = data?.hasMorePages;\n  const onIntersect = useCallback(() => {\n    if (hasMorePages) {\n      setQuery((q) => ({ ...q, page: q.page + 1 }));\n    }\n  }, [hasMorePages]);\n  const [targetRef] = useIntersectionObserver({ onIntersect });\n\n  // useEffect(() => {\n  //   if (entry?.isIntersecting && hasMorePages) {\n  //    const word = filter ? { keywords: filter.keywords.map((item:KeywordsItem) => item.id) } : undefined;\n  //     const date = filter ? { year: filter.primary_release_year } : undefined;\n  //     const genres = filter ? { genres: filter.genres } : undefined;\n  //    const movieFilters = { ...word, ...date,...genres };\n  //     dispatch(fetchNextPage(movieFilters));\n  //   }\n  // }, [dispatch, entry?.isIntersecting, hasMorePages, filter]);\n\n  function filtrateMovies(data: Filters) {\n    // dispatch(resetMovies());\n    const moviesFilters: MovieFilters = {\n      keywords: data.keywords.map((item) => item.id),\n      genres: data.genres,\n      year: data.primary_release_year,\n    };\n    setQuery({\n      page: 1,\n      filters: moviesFilters,\n    });\n  }\n  return (\n    <Grid container spacing={0} sx={{ flexWrap: \"nowrap\", pt: 3 }}>\n      <Grid item xs={5}>\n        <MoviesFilter onApply={(data) => filtrateMovies(data)} />\n      </Grid>\n      <Grid item xs={12}>\n        {!isFetching && !movies?.length && (\n          <Typography variant=\"h6\">\n            No movies were found that match you query\n          </Typography>\n        )}\n        <BoardFilm>\n          {movies?.map((m, i) => (\n            <BoxFilm key={`${m.id}+${i}`}>\n              <MovieCard\n                id={m.id}\n                title={m.title}\n                poster_path={m.poster_path}\n                popularity={m.popularity}\n              />\n            </BoxFilm>\n          ))}\n        </BoardFilm>\n        <div ref={targetRef}>{isFetching && <Loader />}</div>\n      </Grid>\n    </Grid>\n  );\n}\n// const mapStateToProps = (state: RootState) => ({\n//   movies: state.movies.top,\n//   loading: state.movies.loading,\n//   hasMorePages:state.movies.hasMorePages,\n// });\n\n// const connector = connect(mapStateToProps);\n\nexport default Movies;\n","import { MutableRefObject, useEffect, useRef, useState } from \"react\";\n\ninterface Options {\n  threshold?: number;\n  root?: Element;\n  rootMargin?: string;\n  onIntersect?(): void;\n}\ntype HookReturnType = [MutableRefObject<null>, IntersectionObserverEntry?];\nexport function useIntersectionObserver(options: Options = {}): HookReturnType {\n  const { threshold = 1.0, root = null, rootMargin = \"0px\" , onIntersect} = options;\n  const targetRef = useRef(null);\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries: IntersectionObserverEntry[]) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n          onIntersect?.()\n        }\n        setEntry(entry);\n      },\n      {\n        threshold,\n        root,\n        rootMargin,\n      }\n    );\n    if (targetRef.current) {\n      observer.observe(targetRef.current);\n    }\n    return function () {\n      if (targetRef.current) {\n        observer.disconnect();\n      }\n    };\n  }, [onIntersect, rootMargin,root,threshold]);\n  return [targetRef, entry];\n}\n"],"names":["Img","styled","img","_templateObject","_taggedTemplateLiteral","BoxFilm","li","_templateObject2","BoardFilm","ul","_templateObject3","FilmName","p","_templateObject4","MovieCard","_ref","id","title","poster_path","popularity","location","useLocation","_jsx","_Fragment","children","_jsxs","Link","to","concat","state","from","src","width","height","alt","memo","control","data","genres","isLoading","genresLoading","useGetGenresQuery","FormControl","component","variant","sx","m","display","Accordion","AccordionSummary","expandIcon","ArrowDropDownIcon","FormLabel","Skeleton","AccordionDetails","FormGroup","maxHeight","Controller","name","render","_ref2","field","map","genre","FormControlLabel","Checkbox","value","checked","includes","onChange","event","valueNumber","Number","target","filter","label","minYear","maxYear","Date","getFullYear","valuetext","marks","Slider","getAriaLabel","_","valueLabelDisplay","getAriaValueText","track","min","max","step","onApply","keywords","setKeywords","useState","keywordsOption","keywordsLoading","useGetKeywordsQuery","skip","handleSubmit","useForm","defaultValues","primary_release_year","fetchKeyword","useMemo","debounce","query","Paper","onSubmit","Autocomplete","multiple","disablePortal","loading","options","filterOptions","x","getOptionLabel","option","isOptionEqualToValue","renderInput","params","TextField","onInputChange","CheckedFilter","RangeSlider","Button","type","startIcon","FilterAltOffOutlined","initialQuery","page","filters","setQuery","isFetching","useGetFiltrateMoviesQuery","setFilter","movies","results","hasMorePages","onIntersect","useCallback","q","targetRef","arguments","length","undefined","threshold","root","rootMargin","useRef","entry","setEntry","useEffect","observer","IntersectionObserver","entries","isIntersecting","current","observe","disconnect","useIntersectionObserver","Grid","container","spacing","flexWrap","pt","item","xs","MoviesFilter","moviesFilters","year","filtrateMovies","Typography","i","ref","Loader"],"sourceRoot":""}